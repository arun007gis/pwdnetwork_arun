import geopandas as gpd
import folium
from folium import TileLayer
from folium.plugins import MiniMap, MeasureControl, Fullscreen, LocateControl, Search
from folium.plugins import Geocoder

# File paths for shapefiles
shapefile_1_path = r"D:\Shape file\1000km_Latest Rec\1000km_whole\1000km_whole.shp"
shapefile_2_path = r"D:\1000km _Road Digitalisation\Whole Network\Whole Network.shp"

# Load shapefiles using GeoPandas
shapefile_1 = gpd.read_file(shapefile_1_path)
shapefile_2 = gpd.read_file(shapefile_2_path)

# Desired projection: WGS 1984 UTM Zone 43N (EPSG:32643)
target_crs = "EPSG:32643"

# Reproject shapefiles if necessary
if shapefile_1.crs != target_crs:
    shapefile_1 = shapefile_1.to_crs(target_crs)

if shapefile_2.crs != target_crs:
    shapefile_2 = shapefile_2.to_crs(target_crs)

# Calculate total length of the second shapefile in kilometers
shapefile_2["length_km"] = shapefile_2.geometry.length / 1000  # Convert from meters to kilometers
total_length = shapefile_2["length_km"].sum()

# Reproject both shapefiles to WGS 84 (EPSG:4326) for folium compatibility
shapefile_1 = shapefile_1.to_crs("EPSG:4326")
shapefile_2 = shapefile_2.to_crs("EPSG:4326")

# Calculate the combined bounding box (extent) of both shapefiles
combined_bounds = shapefile_1.total_bounds.tolist() + shapefile_2.total_bounds.tolist()
minx, miny = min(combined_bounds[0], combined_bounds[4]), min(combined_bounds[1], combined_bounds[5])
maxx, maxy = max(combined_bounds[2], combined_bounds[6]), max(combined_bounds[3], combined_bounds[7])

# Create a folium map centered on the extent's midpoint
m = folium.Map(location=[(miny + maxy) / 2, (minx + maxx) / 2], zoom_start=12)

# Add Google Roads as a base map
google_roads = TileLayer(
    tiles="https://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}",
    attr="Google",
    subdomains=["mt0", "mt1", "mt2", "mt3"],
    name="Google Roads",
    max_zoom=20,
)
google_roads.add_to(m)

# Style function for the first shapefile (orange, thicker lines)
style_shapefile_1 = lambda x: {
    "color": "orange",
    "weight": 4,  # Line thickness
    "opacity": 1,
}

# Style function for the second shapefile (black, thinner lines)
style_shapefile_2 = lambda x: {
    "color": "black",
    "weight": 2,  # Line thickness
    "opacity": 1,
}

# Add shapefiles to the map with custom styles
folium.GeoJson(
    shapefile_1,
    name="Road Network (Before Reconnaissance Survey)",
    style_function=style_shapefile_1,
).add_to(m)

# Add the second shapefile with labels
geojson_shapefile_2 = folium.GeoJson(
    shapefile_2,
    name="Road Network (After Reconnaissance Survey)",
    style_function=style_shapefile_2,
    tooltip=folium.GeoJsonTooltip(fields=["Road_Name"], aliases=["Road Name:"]),
).add_to(m)

# Add tools
minimap = MiniMap(toggle_display=True)
measure_control = MeasureControl(
    primary_length_unit="meters", secondary_length_unit="kilometers",
    primary_area_unit="sqmeters", secondary_area_unit="hectares"
)
fullscreen = Fullscreen()
locate_control = LocateControl()

# Add tools to map
m.add_child(minimap)
m.add_child(measure_control)
m.add_child(fullscreen)
m.add_child(locate_control)

# Add search control for Road_Name in shapefile 2
search = Search(
    layer=geojson_shapefile_2,
    geom_type="LineString",
    placeholder="Search for a road by name...",
    collapsed=False,
    search_label="Road_Name",  # Field to search
).add_to(m)

# Add Nominatim Geocoder (OpenStreetMap) for location search
from folium.plugins import Search

# Create a geocoder control for searching places (address or place name)
geocoder = Geocoder(
    collapsed=False,
    placeholder="Search location...",
    position="topleft",  # Position of the search bar on the map
    zoom=12,  # Default zoom level after finding a location
    show_result=True,
)
geocoder.add_to(m)

# Add a text box displaying the total length at the bottom of the map
length_info = folium.Marker(
    location=[miny + 0.05, (minx + maxx) / 2],  # Place the marker near the bottom of the map, centered horizontally
    popup=f"Length of Road Digitalised: {total_length:.2f} km",
    icon=folium.DivIcon(html=f"""
        <div style="font-size: 14px; font-weight: bold; color: black; background: white; border: 1px solid grey; 
        padding: 5px; border-radius: 3px; text-align: center; width: 200px; position: absolute; bottom: 10px; left: 50%; transform: translateX(-50%);">
            Length of Road Digitalised: {total_length:.2f} km
        </div>
    """),
)
length_info.add_to(m)

# Add a layer control for better interactivity
folium.LayerControl().add_to(m)

# Restrict the map to the extent of the shapefiles
m.fit_bounds([[miny, minx], [maxy, maxx]])

# Save the map to an HTML file
m.save("map_with_location_search.html")
print("Map saved as 'map_with_location_search.html'.")
